import java.util.Scanner;
import java.util.ArrayList;
import java.util.regex.Pattern;
import java.io.FileWriter;
import java.io.IOException;

public class PROYECTOFINALTIENDASEFE {
    static Scanner escaner = new Scanner(System.in);

    static ArrayList<String> nombresCategorias = new ArrayList<>();
    static ArrayList<ArrayList<String[]>> productosPorCategoria = new ArrayList<>();

    static ArrayList<String[]> carritoCliente = new ArrayList<>();
    static ArrayList<String[]> carritoVendedor = new ArrayList<>();

    static String usuarioVendedor = "";
    static String contrasenaVendedor = "";

    static String nombreClienteRegistrado = "";
    static String apellidoClienteRegistrado = "";
    static String dniClienteRegistrado = "";
    static String numeroClienteRegistrado = "";
    static String emailClienteRegistrado = "";
    static String contrasenaClienteRegistrado = "";

    static boolean clienteEstaLogeado = false;

    static final double TASA_IGV = 0.18;

    public static void main(String[] args) {
        cargarProductosIniciales();

        int opcionPrincipal;
        do {
            System.out.println("\n TIENDAS EFE ");
            System.out.println("Seleccione su rol:");
            System.out.println("1.- Administrador");
            System.out.println("2.- Vendedor");
            System.out.println("3.- Cliente");
            System.out.println("4.- Salir");
            System.out.print("Opción: ");
            opcionPrincipal = escaner.nextInt();
            escaner.nextLine();

            if(opcionPrincipal == 1) {
                menuAdministrador();
            } else if(opcionPrincipal == 2) {
                menuVendedor();
            } else if(opcionPrincipal == 3) {
                menuCliente();
            } else if(opcionPrincipal == 4) {
                System.out.println("Gracias visitar Tiendas EFE.");
            } else {
                System.out.println("Opción inválida.");
            }
        } while(opcionPrincipal != 4);

        escaner.close();
    }

    static void cargarProductosIniciales() {
        nombresCategorias.add("Lavadoras");
        ArrayList<String[]> lavadoras = new ArrayList<>();
        lavadoras.add(new String[]{"LG", "TwinWash", "22 kg", "3299", "100"});
        lavadoras.add(new String[]{"Samsung", "EcoBubble", "20 kg", "2899", "100"});
        lavadoras.add(new String[]{"Mabe", "AquaSaver", "19 kg", "1899", "100"});
        productosPorCategoria.add(lavadoras);

        nombresCategorias.add("Televisores");
        ArrayList<String[]> televisores = new ArrayList<>();
        televisores.add(new String[]{"Tesla", "QLED 4K Ultra HD Google Tv", "50 pulgadas", "1199", "50"});
        televisores.add(new String[]{"LG", "LED 4K UHD ThinQ AI WebOS", "65 pulgadas", "1749", "39"});
        televisores.add(new String[]{"Samsung ", "QLED Vision AI Smart TV", "65 pulgadas", "3199", "45"});
        productosPorCategoria.add(televisores);
    }

    static void menuAdministrador() {
        System.out.println("\n== Administrador ==");
        System.out.print("Ingrese correo: ");
        String email = escaner.nextLine();
        System.out.print("Ingrese contraseña: ");
        String contrasena = escaner.nextLine();
        if(email.equals("administrador@gmail.com") && contrasena.equals("12345")) {
            int opcion;
            do {
                System.out.println("\nMENÚ ADMINISTRADOR");
                System.out.println("1. Agregar categoría");
                System.out.println("2. Agregar producto a categoría");
                System.out.println("3. Eliminar producto de categoría");
                System.out.println("4. Mostrar categorías y productos");
                System.out.println("5. Eliminar categoría");
                System.out.println("6. Salir");
                System.out.print("Opción: ");
                opcion = escaner.nextInt();
                escaner.nextLine();

                if(opcion == 1) {
                    agregarCategoria();
                } else if(opcion == 2) {
                    agregarProductoACategoria();
                } else if(opcion == 3) {
                    eliminarProductoDeCategoria();
                } else if(opcion == 4) {
                    mostrarTodasCategoriasYProductos();
                } else if(opcion == 5) {
                    eliminarCategoria();
                } else if(opcion == 6) {
                    System.out.println("Saliendo del ROL Admin.");
                } else {
                    System.out.println("Opción invalida.");
                }
            } while(opcion != 6);
        } else {
            System.out.println("opcion invalida");
        }
    }

    static void agregarCategoria() {
        System.out.print("Ingrese el nombre de la nueva categoría: ");
        String nuevaCategoria = escaner.nextLine();
        if (nombresCategorias.contains(nuevaCategoria)) {
            System.out.println(" La categoría '" + nuevaCategoria + "' ya existe.");
        } else {
            nombresCategorias.add(nuevaCategoria);
            productosPorCategoria.add(new ArrayList<String[]>());
            System.out.println(" Categoría '" + nuevaCategoria + "' agregada con éxito.");
        }
    }

    static void agregarProductoACategoria() {
        if (nombresCategorias.isEmpty()) {
            System.out.println("No hay categorías para agregar productos");
            return;
        }

        System.out.println("\nSeleccione una categoría para agregar producto");
        for (int i = 0; i < nombresCategorias.size(); i++) {
            System.out.println(i + ". " + nombresCategorias.get(i));
        }

        System.out.print("Ingrese el índice de la categoría: ");
        int indiceCategoria = escaner.nextInt();
        escaner.nextLine();

        if (indiceCategoria >= 0 && indiceCategoria < nombresCategorias.size()) {
            ArrayList<String[]> productosEnCategoria = productosPorCategoria.get(indiceCategoria);

            System.out.print("Ingrese la marca del producto: ");
            String marca = escaner.nextLine();
            System.out.print("Ingrese el nombre del producto: ");
            String nombre = escaner.nextLine();
            System.out.print("Ingrese la capacidad: ");
            String capacidad = escaner.nextLine();
            System.out.print("Ingrese el precio: ");
            String precio = escaner.nextLine();
            System.out.print("Ingrese el stock: ");
            String stock = escaner.nextLine();

            productosEnCategoria.add(new String[]{marca, nombre, capacidad, precio, stock});
            System.out.println(" Producto agregado a la categoría '" + nombresCategorias.get(indiceCategoria) + "' con éxito.");
        } else {
            System.out.println(" Índice inválido.");
        }
    }

    static void eliminarProductoDeCategoria() {
        if (nombresCategorias.isEmpty()) {
            System.out.println("No hay categorías ni productos para eliminar.");
            return;
        }

        System.out.println("\nSeleccione una categoría para eliminar producto");
        for (int i = 0; i < nombresCategorias.size(); i++) {
            System.out.println(i + ". " + nombresCategorias.get(i));
        }

        System.out.print("Ingrese el índice de la categoría: ");
        int indiceCategoria = escaner.nextInt();
        escaner.nextLine();

        if (indiceCategoria >= 0 && indiceCategoria < nombresCategorias.size()) {
            ArrayList<String[]> productosEnCategoria = productosPorCategoria.get(indiceCategoria);

            if (productosEnCategoria.isEmpty()) {
                System.out.println("No hay productos para eliminar en esta categoría .");
                return;
            }

            System.out.println("\n--- Productos en '" + nombresCategorias.get(indiceCategoria) + "' ---");
            for (int i = 0; i < productosEnCategoria.size(); i++) {
                String[] prod = productosEnCategoria.get(i);
                System.out.println(i + ". Marca: " + prod[0] + " | Nombre: " + prod[1] +
                        " | Capacidad: " + prod[2] + " | Precio: S/. " + prod[3] +
                        " | Stock: " + prod[4]);
            }

            System.out.print("Ingrese el índice del producto a eliminar: ");
            int indiceProducto = escaner.nextInt();
            escaner.nextLine();

            if (indiceProducto >= 0 && indiceProducto < productosEnCategoria.size()) {
                String[] productoEliminado = productosEnCategoria.remove(indiceProducto);
                System.out.println(" Producto '" + productoEliminado[1] + "' eliminado de la categoría '" + nombresCategorias.get(indiceCategoria) + "'.");
            } else {
                System.out.println(" Índice de producto inválido.");
            }
        } else {
            System.out.println(" Índice de categoría inválido.");
        }
    }

    static void eliminarCategoria() {
        if (nombresCategorias.isEmpty()) {
            System.out.println("No hay categorías para eliminar.");
            return;
        }

        System.out.println("\n--- Seleccione una categoría para eliminar ---");
        for (int i = 0; i < nombresCategorias.size(); i++) {
            System.out.println(i + ". " + nombresCategorias.get(i));
        }

        System.out.print("Ingrese el índice de la categoría a eliminar: ");
        int indiceCategoria = escaner.nextInt();
        escaner.nextLine();

        if (indiceCategoria >= 0 && indiceCategoria < nombresCategorias.size()) {
            String nombreCategoriaEliminada = nombresCategorias.remove(indiceCategoria);
            productosPorCategoria.remove(indiceCategoria);
            System.out.println(" Categoría '" + nombreCategoriaEliminada + "' y sus productos asociados han sido eliminados.");
        } else {
            System.out.println(" Índice de categoría inválido.");
        }
    }

    static void mostrarTodasCategoriasYProductos() {
        if (nombresCategorias.isEmpty()) {
            System.out.println("No hay categorías para mostrar");
            return;
        }
        System.out.println("\nCategorías y Productos");
        for (int i = 0; i < nombresCategorias.size(); i++) {
            System.out.println("\nCategoría: " + nombresCategorias.get(i) + " (Índice: " + i + ")");
            ArrayList<String[]> productos = productosPorCategoria.get(i);
            if (productos.isEmpty()) {
                System.out.println("  No hay productos en esta categoría.");
            } else {
                for (int j = 0; j < productos.size(); j++) {
                    String[] prod = productos.get(j);
                    System.out.println("  " + j + ". Marca: " + prod[0] + " | Nombre: " + prod[1] +
                            " | Capacidad: " + prod[2] + " | Precio: S/. " + prod[3] +
                            " | Stock: " + prod[4]);
                }
            }
        }
        System.out.println("=================================");
    }

    static void mostrarInventario(int indiceCategoria) {
        if (indiceCategoria < 0 || indiceCategoria >= productosPorCategoria.size()) {
            System.out.println("Categoría inválida.");
            return;
        }
        ArrayList<String[]> productos = productosPorCategoria.get(indiceCategoria);
        if (productos.isEmpty()) {
            System.out.println("No hay productos en la categoría '" + nombresCategorias.get(indiceCategoria) + "'.");
            return;
        }
        System.out.println("\n Inventario de la categoría: " + nombresCategorias.get(indiceCategoria) + " ---");
        for (int i = 0; i < productos.size(); i++) {
            String[] prod = productos.get(i);
            System.out.println(i + ". Marca: " + prod[0] + " | Nombre: " + prod[1] +
                    " | Capacidad: " + prod[2] + " | Precio: S/. " + prod[3] +
                    " | Stock: " + prod[4]);
        }
    }

    static void mostrarCategoriasDisponibles() {
        if (nombresCategorias.isEmpty()) {
            System.out.println("No hay categorías disponibles.");
            return;
        }
        System.out.println("\n CATEGORÍAS DISPONIBLES ");
        for (int i = 0; i < nombresCategorias.size(); i++) {
            System.out.println(i + ". " + nombresCategorias.get(i));
        }
    }


    static void menuVendedor() {
        System.out.println("\nVendedor");
        if (usuarioVendedor.isEmpty() || contrasenaVendedor.isEmpty()) {
            System.out.print("Registro  Ingrese usuario: ");
            usuarioVendedor = escaner.nextLine();
            System.out.print("Registro  Ingrese contraseña: ");
            contrasenaVendedor = escaner.nextLine();
            System.out.println("registrado correctamente.");
        }

        System.out.println("\nIniciar sesión como vendedor:");
        System.out.print("Usuario: ");
        String usuarioLogin = escaner.nextLine();
        System.out.print("Contraseña: ");
        String contrasenaLogin = escaner.nextLine();
        if(usuarioLogin.equals(usuarioVendedor) && contrasenaLogin.equals(contrasenaVendedor)) {
            int opcion;
            do {
                System.out.println("\nMENÚ VENDEDOR");
                System.out.println("1. Mostrar todos los productos");
                System.out.println("2. Iniciar nueva venta");
                System.out.println("3. Salir");
                System.out.print("Opción: ");
                opcion = escaner.nextInt();
                escaner.nextLine();

                if(opcion == 1) {
                    mostrarTodasCategoriasYProductos();
                } else if(opcion == 2) {
                    menuVentaEnTienda();
                } else if(opcion == 3) {
                    System.out.println("Saliendo del modo Vendedor.");
                } else {
                    System.out.println("Opción inválida.");
                }
            } while(opcion != 3);
        } else {
            System.out.println("Usuario o contraseña incorrectos.");
        }
    }

    static void menuVentaEnTienda() {
        carritoVendedor.clear();
        int opcionVenta;
        do {
            System.out.println("\nVENTA EN TIENDA");
            System.out.println("1. Agregar producto a la venta");
            System.out.println("2. Ver productos en venta");
            System.out.println("3. Eliminar producto de la venta");
            System.out.println("4. Procesar venta (generar boleta)");
            System.out.println("5. Cancelar venta y Volver al menú Vendedor");
            System.out.print("Opción: ");
            opcionVenta = escaner.nextInt();
            escaner.nextLine();

            if (opcionVenta == 1) {
                agregarProductoAVenta();
            } else if (opcionVenta == 2) {
                verVentaActual();
            } else if (opcionVenta == 3) {
                eliminarProductoDeVenta();
            } else if (opcionVenta == 4) {
                procesarVentaEnTienda();

                if (carritoVendedor.isEmpty()) {
                    opcionVenta = 5;
                }
            } else if (opcionVenta == 5) {
                System.out.println("Venta cancelada. Volviendo al menú Vendedor.");
                carritoVendedor.clear();
            } else {
                System.out.println(" Opción inválida.");
            }
        } while (opcionVenta != 5);
    }

    static void agregarProductoAVenta() {
        if (nombresCategorias.isEmpty()) {
            System.out.println("No hay productos disponibles para agregar a la venta.");
            return;
        }
        mostrarCategoriasDisponibles();
        System.out.print("Ingrese el índice de la categoría: ");
        int indiceCategoria = escaner.nextInt();
        escaner.nextLine();

        if (indiceCategoria < 0 || indiceCategoria >= nombresCategorias.size()) {
            System.out.println(" Índice de categoría inválido.");
            return;
        }

        mostrarInventario(indiceCategoria);

        ArrayList<String[]> productosDeCategoria = productosPorCategoria.get(indiceCategoria);
        if (productosDeCategoria.isEmpty()) {
            System.out.println("No hay productos en esta categoría para agregar.");
            return;
        }

        System.out.print("Ingrese el índice del producto a agregar a la venta: ");
        int indiceProducto = escaner.nextInt();
        escaner.nextLine();

        if(indiceProducto >= 0 && indiceProducto < productosDeCategoria.size()){
            String[] productoSeleccionado = productosDeCategoria.get(indiceProducto);
            int stockDisponible = Integer.parseInt(productoSeleccionado[4]);

            System.out.print("Ingrese la cantidad a agregar a la venta: ");
            int cantidad = escaner.nextInt();
            escaner.nextLine();

            if (cantidad > 0 && cantidad <= stockDisponible) {
                String[] productoParaVenta = productoSeleccionado.clone();
                productoParaVenta[4] = String.valueOf(cantidad);
                carritoVendedor.add(productoParaVenta);
                System.out.println(" " + cantidad + " unidad(es) de '" + productoSeleccionado[1] + "' agregada(s) a la venta.");
            } else {
                System.out.println(" Cantidad inválida o stock insuficiente. Stock disponible: " + stockDisponible);
            }
        } else {
            System.out.println(" Índice de producto inválido.");
        }
    }

    static void verVentaActual() {
        if(carritoVendedor.isEmpty()){
            System.out.println("La lista de productos para la venta está vacía.");
        } else {
            System.out.println("\n--- Productos para la Venta Actual ---");
            for (int i = 0; i < carritoVendedor.size(); i++){
                String[] prod = carritoVendedor.get(i);
                System.out.println(i + ". Marca: " + prod[0] + " | Nombre: " + prod[1] + " | Precio c/u: S/. " + prod[3] + " | Cantidad: " + prod[4] + " | Subtotal: S/. " + (Double.parseDouble(prod[3]) * Integer.parseInt(prod[4])) );
            }
        }
    }

    static void eliminarProductoDeVenta() {
        if(carritoVendedor.isEmpty()){
            System.out.println("La lista de productos para la venta está vacía.");
            return;
        }
        verVentaActual();
        System.out.print("Ingrese el índice del producto a remover de la venta: ");
        int indice = escaner.nextInt();
        escaner.nextLine();
        if(indice >= 0 && indice < carritoVendedor.size()){
            String[] productoEliminado = carritoVendedor.remove(indice);
            System.out.println(" Producto '" + productoEliminado[1] + "' eliminado de la venta.");
        } else {
            System.out.println(" Índice inválido.");
        }
    }

    static void procesarVentaEnTienda() {
        if(carritoVendedor.isEmpty()){
            System.out.println("La lista de productos para la venta está vacía.");
            return;
        }

        System.out.println("\n PROCESAR VENTA EN TIENDA ");
        System.out.print("Ingrese Nombres del Cliente: ");
        String nombreClienteVenta = escaner.nextLine();
        System.out.print("Ingrese Apellidos del Cliente: ");
        String apellidoClienteVenta = escaner.nextLine();
        System.out.print("Ingrese DNI del Cliente (8 dígitos): ");
        String dniClienteVenta = escaner.nextLine();

        if(!Pattern.matches("\\d{8}", dniClienteVenta)) {
            System.out.println(" DNI inválido. Venta cancelada.");
            return;
        }

        double subtotalConIgv = 0;
        for(String[] prod : carritoVendedor) {
            subtotalConIgv += Double.parseDouble(prod[3]) * Integer.parseInt(prod[4]);
        }

        double costoEnvio = 0;

        double totalConIgv = subtotalConIgv + costoEnvio;

        System.out.println("\nSeleccione método de pago:");
        System.out.println("1. Efectivo");
        System.out.println("2. Tarjeta de Crédito");
        System.out.println("3. Tarjeta de Débito");
        System.out.print("Opción: ");
        int opcionPago = escaner.nextInt();
        escaner.nextLine();

        if (opcionPago == 1) {
            System.out.println("Total a pagar: S/. " + String.format("%.2f", totalConIgv));
            System.out.print("Ingrese monto recibido en efectivo: S/. ");
            double montoPagado = escaner.nextDouble();
            escaner.nextLine();

            if (montoPagado < totalConIgv) {
                System.out.println(" Pago insuficiente. Transacción cancelada.");
                return;
            }
            double cambio = montoPagado - totalConIgv;
            System.out.println(" Pago aceptado. Su cambio es S/. " + String.format("%.2f", cambio));

            generarBoletaVendedor(nombreClienteVenta, apellidoClienteVenta, dniClienteVenta, subtotalConIgv, costoEnvio, totalConIgv, montoPagado, cambio);

        } else if (opcionPago == 2 || opcionPago == 3) {
            System.out.print("Ingrese número de tarjeta (16 dígitos): ");
            String numeroTarjeta = escaner.nextLine();
            System.out.print("Ingrese CVV (3 dígitos): ");
            String cvv = escaner.nextLine();
            if(!Pattern.matches("\\d{16}", numeroTarjeta) || !Pattern.matches("\\d{3}", cvv)){
                System.out.println("Datos de tarjeta inválidos. Venta cancelada.");
                return;
            }
            System.out.println("Total a pagar: S/. " + String.format("%.2f", totalConIgv));
            System.out.println("Pago con tarjeta aceptado.");

            generarBoletaVendedor(nombreClienteVenta, apellidoClienteVenta, dniClienteVenta, subtotalConIgv, costoEnvio, totalConIgv, totalConIgv, 0);

        } else {
            System.out.println("Opción de pago inválida. Venta cancelada.");
            return;
        }


        for(String[] productoVendido : carritoVendedor) {
            String marcaVendido = productoVendido[0];
            String nombreVendido = productoVendido[1];
            String precioVendido = productoVendido[3];
            int cantidadVendida = Integer.parseInt(productoVendido[4]);

            boolean stockActualizado = false;
            for (ArrayList<String[]> productosEnCategoria : productosPorCategoria) {
                for (String[] prodInventario : productosEnCategoria) {
                    if (prodInventario[0].equals(marcaVendido) &&
                            prodInventario[1].equals(nombreVendido) &&
                            prodInventario[3].equals(precioVendido)) {

                        int stockActual = Integer.parseInt(prodInventario[4]);
                        if (stockActual >= cantidadVendida) {
                            prodInventario[4] = String.valueOf(stockActual - cantidadVendida);
                            System.out.println("Se descontó " + cantidadVendida + " unidad(es) de " + nombreVendido + " del inventario.");
                            stockActualizado = true;
                            break;
                        } else {
                            System.out.println("Advertencia: Stock insuficiente en el inventario para " + nombreVendido + ". Solo se descontaron " + stockActual + " unidades.");
                            prodInventario[4] = "0";
                            stockActualizado = true;
                            break;
                        }
                    }
                }
                if (stockActualizado) {
                    break;
                }
            }
        }

        carritoVendedor.clear();
    }

    static void generarBoletaVendedor(String nombre, String apellido, String dni, double subtotalConIgv, double envio, double totalConIgv, double montoPagado, double cambio) {
        try {
            FileWriter escritor = new FileWriter("boleta_venta_tienda.txt");
            escritor.write("=== BOLETA DE VENTA (TIENDA FISICA) ===\n");
            escritor.write("Fecha: " + java.time.LocalDate.now() + "\n");
            escritor.write("Hora: " + java.time.LocalTime.now() + "\n");
            escritor.write("Vendedor: " + usuarioVendedor + "\n");
            escritor.write("Cliente: " + nombre + " " + apellido + "\n");
            escritor.write("DNI: " + dni + "\n");
            escritor.write("\n--- Detalle de Productos ---\n");
            for(String[] prod : carritoVendedor) {
                escritor.write("- " + prod[1] + " (Marca: " + prod[0] + ", Capacidad: " + prod[2] + ") x " + prod[4] + " unidades: S/. " + (Double.parseDouble(prod[3]) * Integer.parseInt(prod[4])) + "\n");
            }
            escritor.write("----------------------------\n");

            double valorVenta = subtotalConIgv / (1 + TASA_IGV);
            double igvCalculado = subtotalConIgv - valorVenta;

            escritor.write("Valor de Venta: S/. " + String.format("%.2f", valorVenta) + "\n");
            escritor.write("IGV (18%): S/. " + String.format("%.2f", igvCalculado) + "\n");
            escritor.write("Subtotal: S/. " + String.format("%.2f", subtotalConIgv) + "\n");
            escritor.write("Costo de envío: S/. " + String.format("%.2f", envio) + " (N/A para tienda fisica)\n");
            escritor.write("Total a pagar: S/. " + String.format("%.2f", totalConIgv) + "\n");
            escritor.write("Monto pagado: S/. " + String.format("%.2f", montoPagado) + "\n");
            escritor.write("Cambio: S/. " + String.format("%.2f", cambio) + "\n");
            escritor.write("============================\n");
            escritor.close();
            System.out.println(" Boleta de venta en tienda generada y guardada en boleta_venta_tienda.txt");
        } catch(IOException e) {
            System.out.println(" Error al generar la boleta de venta en tienda: " + e.getMessage());
        }
    }


    static void menuCliente() {
        int opcion;
        boolean salirMenuCliente = false;

        do {
            System.out.println("\n MENÚ CLIENTE");
            if (clienteEstaLogeado) {
                System.out.println("1. Mostrar categorías");
                System.out.println("2. Buscar productos");
                System.out.println("3. Agregar producto al carrito");
                System.out.println("4. Eliminar producto del carrito");
                System.out.println("5. Ver carrito");
                System.out.println("6. Procesar pedido");
                System.out.println("7. Cerrar Sesión");
                System.out.println("8. Salir del modo Cliente");
            } else {
                System.out.println("1. Mostrar categorías");
                System.out.println("2. Buscar productos");
                System.out.println("3. Registrarse");
                System.out.println("4. Iniciar Sesión");
                System.out.println("5. Salir del modo Cliente");
            }

            System.out.print("Opción: ");
            opcion = escaner.nextInt();
            escaner.nextLine();

            if (clienteEstaLogeado) {
                switch (opcion) {
                    case 1:
                        mostrarCategoriasCliente();
                        break;
                    case 2:
                        buscarProductosCliente();
                        break;
                    case 3:
                        agregarAlCarritoCliente();
                        break;
                    case 4:
                        eliminarDelCarritoCliente();
                        break;
                    case 5:
                        verCarritoCliente();
                        break;
                    case 6:
                        procesarPedidoCliente(nombreClienteRegistrado, apellidoClienteRegistrado, dniClienteRegistrado);
                        break;
                    case 7:
                        cerrarSesionCliente();
                        break;
                    case 8:
                        System.out.println("Saliendo del modo Cliente.");
                        salirMenuCliente = true;
                        break;
                    default:
                        System.out.println(" Opción inválida.");
                        break;
                }
            } else {
                switch (opcion) {
                    case 1:
                        mostrarCategoriasCliente();
                        break;
                    case 2:
                        buscarProductosCliente();
                        break;
                    case 3:
                        registrarCliente();
                        break;
                    case 4:
                        iniciarSesionCliente();
                        break;
                    case 5:
                        System.out.println("Saliendo del modo Cliente.");
                        salirMenuCliente = true;
                        break;
                    default:
                        System.out.println(" Opción inválida.");
                        break;
                }
            }
        } while (!salirMenuCliente);


        if (clienteEstaLogeado) {
            cerrarSesionCliente();
        }
    }


    static void registrarCliente() {
        System.out.println("\nREGISTRO DE CLIENTE");
        if (!emailClienteRegistrado.isEmpty()) {
            System.out.println("Ya hay un cliente registrado. ¿Desea registrar uno nuevo? (s/n)");
            String respuesta = escaner.nextLine().toLowerCase();
            if (!respuesta.equals("s")) {
                System.out.println("Registro cancelado.");
                return;
            }
        }

        System.out.print("Ingrese sus Nombres: ");
        nombreClienteRegistrado = escaner.nextLine();
        System.out.print("Ingrese sus Apellidos: ");
        apellidoClienteRegistrado = escaner.nextLine();
        System.out.print("Ingrese DNI : ");
        dniClienteRegistrado = escaner.nextLine();
        System.out.print("Ingrese su Número de telefono : ");
        numeroClienteRegistrado = escaner.nextLine();
        System.out.print("Ingrese Correo: ");
        emailClienteRegistrado = escaner.nextLine();
        System.out.print("Ingrese Contraseña: ");
        contrasenaClienteRegistrado = escaner.nextLine();

        if(!Pattern.matches("\\d{8}", dniClienteRegistrado)) {
            System.out.println(" DNI inválido. Registro fallido.");
            limpiarDatosClienteRegistrado();
            return;
        }
        if(!Pattern.matches("\\d{9}", numeroClienteRegistrado)) {
            System.out.println(" Número inválido. Registro fallido.");
            limpiarDatosClienteRegistrado();
            return;
        }
        if(!Pattern.matches("[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}", emailClienteRegistrado)) {
            System.out.println(" Correo inválido. Registro fallido.");
            limpiarDatosClienteRegistrado();
            return;
        }
        System.out.println(" Cliente registrado exitosamente. Ahora puede iniciar sesión.");
    }

    static void limpiarDatosClienteRegistrado() {
        nombreClienteRegistrado = "";
        apellidoClienteRegistrado = "";
        dniClienteRegistrado = "";
        numeroClienteRegistrado = "";
        emailClienteRegistrado = "";
        contrasenaClienteRegistrado = "";
        clienteEstaLogeado = false;
    }

    static boolean iniciarSesionCliente() {
        if (emailClienteRegistrado.isEmpty()) {
            System.out.println("No hay clientes registrados. Por favor, regístrese primero.");
            return false;
        }
        if (clienteEstaLogeado) {
            System.out.println("Ya ha iniciado sesión como " + nombreClienteRegistrado + ".");
            return true;
        }

        System.out.println("\n== INICIAR SESIÓN CLIENTE ==");
        int intentos = 0;
        while(intentos < 3) {
            System.out.print("Ingrese Correo: ");
            String loginEmail = escaner.nextLine();
            System.out.print("Ingrese Contraseña: ");
            String loginContrasena = escaner.nextLine();

            if(loginEmail.equals(emailClienteRegistrado) && loginContrasena.equals(contrasenaClienteRegistrado)) {
                System.out.println(" Sesión iniciada correctamente. ¡Bienvenido, " + nombreClienteRegistrado + "!");
                clienteEstaLogeado = true;
                return true;
            } else {
                System.out.println(" Credenciales incorrectas.");
                intentos++;
            }
        }
        System.out.println(" Límite de intentos alcanzado. Volviendo al menú anterior.");
        return false;
    }

    static void cerrarSesionCliente() {
        if (clienteEstaLogeado) {
            System.out.println("Cerrando sesión de " + nombreClienteRegistrado + ".");
            carritoCliente.clear();
            clienteEstaLogeado = false;
        } else {
            System.out.println("No hay ninguna sesión iniciada.");
        }
    }


    static void mostrarCategoriasCliente() {
        if (nombresCategorias.isEmpty()) {
            System.out.println("No hay categorías disponibles.");
            return;
        }
        int opcionCategoria;
        do {
            mostrarCategoriasDisponibles();
            System.out.println(nombresCategorias.size() + ". Volver al menú Cliente");
            System.out.print("Seleccione una categoría: ");
            opcionCategoria = escaner.nextInt();
            escaner.nextLine();

            if (opcionCategoria >= 0 && opcionCategoria < nombresCategorias.size()) {
                mostrarInventario(opcionCategoria);
            } else if (opcionCategoria == nombresCategorias.size()) {
                System.out.println("Volviendo al menú Cliente.");
            } else {
                System.out.println(" Categoría inválida.");
            }
        } while (opcionCategoria != nombresCategorias.size());
    }

    static void buscarProductosCliente() {
        if (nombresCategorias.isEmpty()) {
            System.out.println("No hay productos disponibles para buscar.");
            return;
        }
        System.out.print("Ingrese texto para buscar productos (marca o nombre): ");
        String palabraClave = escaner.nextLine().toLowerCase();
        boolean encontrado = false;

        System.out.println("\n--- Resultados de la búsqueda ---");
        for (int i = 0; i < nombresCategorias.size(); i++) {
            ArrayList<String[]> productosEnCategoria = productosPorCategoria.get(i);
            for (int j = 0; j < productosEnCategoria.size(); j++) {
                String[] prod = productosEnCategoria.get(j);
                if(prod[0].toLowerCase().contains(palabraClave) || prod[1].toLowerCase().contains(palabraClave)) {
                    System.out.println("Categoría: " + nombresCategorias.get(i) + " | Producto: " + prod[1] +
                            " | Precio: S/. " + prod[3] + " | Stock: " + prod[4]);
                    encontrado = true;
                }
            }
        }
        if(!encontrado) {
            System.out.println("No se encontraron productos que coincidan.");
        }
    }

    static void agregarAlCarritoCliente() {
        if (!clienteEstaLogeado) {
            System.out.println(" Para agregar productos al carrito, debe iniciar sesión.");
            return;
        }
        if (nombresCategorias.isEmpty()) {
            System.out.println("No hay productos disponibles para agregar al carrito.");
            return;
        }
        mostrarCategoriasDisponibles();
        System.out.print("Ingrese el índice de la categoría: ");
        int indiceCategoria = escaner.nextInt();
        escaner.nextLine();

        if (indiceCategoria < 0 || indiceCategoria >= nombresCategorias.size()) {
            System.out.println(" Índice inválido.");
            return;
        }

        mostrarInventario(indiceCategoria);

        ArrayList<String[]> productosDeCategoria = productosPorCategoria.get(indiceCategoria);
        if (productosDeCategoria.isEmpty()) {
            System.out.println("No hay productos en esta categoría para agregar.");
            return;
        }

        System.out.print("Ingrese el índice del producto a agregar al carrito: ");
        int indiceProducto = escaner.nextInt();
        escaner.nextLine();

        if(indiceProducto >= 0 && indiceProducto < productosDeCategoria.size()){
            String[] productoSeleccionado = productosDeCategoria.get(indiceProducto);
            int stockDisponible = Integer.parseInt(productoSeleccionado[4]);

            System.out.print("Ingrese la cantidad que desea agregar: ");
            int cantidad = escaner.nextInt();
            escaner.nextLine();

            if (cantidad > 0 && cantidad <= stockDisponible) {
                String[] productoParaCarrito = productoSeleccionado.clone();
                productoParaCarrito[4] = String.valueOf(cantidad);
                carritoCliente.add(productoParaCarrito);
                System.out.println(" " + cantidad + " unidad(es) de '" + productoSeleccionado[1] + "' agregada(s) al carrito.");
            } else {
                System.out.println(" Cantidad inválida o stock insuficiente. Stock disponible: " + stockDisponible);
            }
        } else {
            System.out.println(" Índice de producto inválido.");
        }
    }

    static void eliminarDelCarritoCliente() {
        if (!clienteEstaLogeado) {
            System.out.println(" Para eliminar productos del carrito, debe iniciar sesión.");
            return;
        }
        if(carritoCliente.isEmpty()){
            System.out.println("El carrito está vacío.");
            return;
        }
        verCarritoCliente();
        System.out.print("Ingrese el índice del producto a remover del carrito: ");
        int indice = escaner.nextInt();
        escaner.nextLine();
        if(indice >= 0 && indice < carritoCliente.size()){
            String[] productoEliminado = carritoCliente.remove(indice);
            System.out.println(" Producto '" + productoEliminado[1] + "' eliminado del carrito.");
        } else {
            System.out.println(" Índice inválido.");
        }
    }

    static void verCarritoCliente() {
        if (!clienteEstaLogeado) {
            System.out.println("Debe iniciar sesión para ver su carrito.");
            return;
        }
        if(carritoCliente.isEmpty()){
            System.out.println("El carrito está vacío.");
        } else {
            System.out.println("\nCarrito de Compras" );
            for (int i = 0; i < carritoCliente.size(); i++){
                String[] prod = carritoCliente.get(i);
                System.out.println(i + ". Marca: " + prod[0] + " | Nombre: " + prod[1] + " | Precio c/u: S/. " + prod[3] + " | Cantidad: " + prod[4]);
            }
        }
    }

    static void procesarPedidoCliente(String nombreCliente, String apellidoCliente, String dniCliente) {
        if (!clienteEstaLogeado) {
            System.out.println("debe iniciar sesión.");
            return;
        }
        if(carritoCliente.isEmpty()){
            System.out.println("El carrito está vacío. Agregue productos.");
            return;
        }
        System.out.println("Seleccione tipo de envío:");
        System.out.println("1. Envío Normal (S/. 20)");
        System.out.println("2. Envío Express (S/. 50)");
        System.out.print("Opción: ");
        int opcionEnvio = escaner.nextInt();
        escaner.nextLine();
        double costoEnvio = (opcionEnvio == 1) ? 20 : 50;

        double subtotalConIgv = 0;
        for(String[] prod : carritoCliente) {
            subtotalConIgv += Double.parseDouble(prod[3]) * Integer.parseInt(prod[4]);
        }
        double totalConIgv = subtotalConIgv + costoEnvio;

        System.out.println("Seleccione método de pago:");
        System.out.println("1. Tarjeta de Crédito");
        System.out.println("2. Tarjeta de Débito");
        System.out.print("Opción: ");
        int opcionPago = escaner.nextInt();
        escaner.nextLine();

        System.out.print("Ingrese número de tarjeta : ");
        String numeroTarjeta = escaner.nextLine();
        System.out.print("Ingrese CVV : ");
        String cvv = escaner.nextLine();
        if(!Pattern.matches("\\d{16}", numeroTarjeta) || !Pattern.matches("\\d{3}", cvv)){
            System.out.println(" Datos de tarjeta inválidos.");
            return;
        }

        System.out.print("Ingrese Provincia: ");
        String provincia = escaner.nextLine();
        System.out.print("Ingrese Distrito: ");
        String distrito = escaner.nextLine();
        System.out.print("Ingrese Departamento: ");
        String departamento = escaner.nextLine();
        System.out.print("Ingrese Dirección: ");
        String direccion = escaner.nextLine();

        System.out.println("Total a pagar: S/. " + String.format("%.2f", totalConIgv));
        System.out.print("Ingrese monto a pagar: S/. ");
        double montoPagado = escaner.nextDouble();
        escaner.nextLine();

        if(montoPagado < totalConIgv) {
            System.out.println(" Pago insuficiente. Transacción cancelada.");
            return;
        }
        double cambio = montoPagado - totalConIgv;
        System.out.println(" Pago aceptado. Su cambio es S/. " + String.format("%.2f", cambio));

        for(String[] productoCarrito : carritoCliente) {
            String marcaComprada = productoCarrito[0];
            String nombreComprada = productoCarrito[1];
            String precioComprado = productoCarrito[3];
            int cantidadComprada = Integer.parseInt(productoCarrito[4]);

            boolean stockActualizado = false;
            for (ArrayList<String[]> productosEnCategoria : productosPorCategoria) {
                for (String[] prodInventario : productosEnCategoria) {
                    if (prodInventario[0].equals(marcaComprada) &&
                            prodInventario[1].equals(nombreComprada) &&
                            prodInventario[3].equals(precioComprado)) {
                        int stockActual = Integer.parseInt(prodInventario[4]);
                        if (stockActual >= cantidadComprada) {
                            prodInventario[4] = String.valueOf(stockActual - cantidadComprada);
                            stockActualizado = true;
                            break;
                        } else {
                            System.out.println("Advertencia: El producto " + prodInventario[1] + " no tenía stock suficiente en el inventario al momento del pedido. Solo se descontaron " + stockActual + " unidades.");
                            prodInventario[4] = "0";
                            stockActualizado = true;
                            break;
                        }
                    }
                }
                if (stockActualizado) {
                    break;
                }
            }
        }

        generarBoletaCliente(nombreCliente, apellidoCliente, dniCliente, subtotalConIgv, costoEnvio, totalConIgv, montoPagado, cambio, provincia, distrito, departamento, direccion);

        carritoCliente.clear();
        System.out.println("Pedido procesado correctamente. Regresando al menú de cliente.");
    }

    static void generarBoletaCliente(String nombre, String apellido, String dni, double subtotalConIgv, double envio, double totalConIgv, double montoPagado, double cambio, String provincia, String distrito, String departamento, String direccion) {
        try {
            FileWriter escritor = new FileWriter("boleta_cliente_online.txt");
            escritor.write("=== BOLETA DE VENTA (CLIENTE ONLINE) ===\n");
            escritor.write("Fecha: " + java.time.LocalDate.now() + "\n");
            escritor.write("Hora: " + java.time.LocalTime.now() + "\n");
            escritor.write("Cliente: " + nombre + " " + apellido + "\n");
            escritor.write("DNI: " + dni + "\n");
            escritor.write("Dirección de envío: " + direccion + ", " + distrito + ", " + provincia + ", " + departamento + "\n");
            escritor.write("\n--- Detalle de Productos ---\n");
            for(String[] prod : carritoCliente) {
                escritor.write("- " + prod[1] + " (Marca: " + prod[0] + ", Capacidad: " + prod[2] + ") x " + prod[4] + " unidades: S/. " + (Double.parseDouble(prod[3]) * Integer.parseInt(prod[4])) + "\n");
            }
            escritor.write("----------------------------\n");

            double valorVenta = subtotalConIgv / (1 + TASA_IGV);
            double igvCalculado = subtotalConIgv - valorVenta;

            escritor.write("Valor de Venta: S/. " + String.format("%.2f", valorVenta) + "\n");
            escritor.write("IGV (18%): S/. " + String.format("%.2f", igvCalculado) + "\n");
            escritor.write("Subtotal: S/. " + String.format("%.2f", subtotalConIgv) + "\n");
            escritor.write("Costo de envío: S/. " + String.format("%.2f", envio) + "\n");
            escritor.write("Total a pagar: S/. " + String.format("%.2f", totalConIgv) + "\n");
            escritor.write("Monto pagado: S/. " + String.format("%.2f", montoPagado) + "\n");
            escritor.write("Cambio: S/. " + String.format("%.2f", cambio) + "\n");
            escritor.write("============================\n");
            escritor.close();
            System.out.println(" Boleta de cliente generada y guardada en boleta_cliente_online.txt");
        } catch(IOException e) {
            System.out.println(" Error al generar la boleta de cliente.");
        }
    }
}
